{"name":"Gwt-appcache","tagline":"GWT AppCache Support Library","body":"gwt-appcache\r\n============\r\n\r\n[![Build Status](https://secure.travis-ci.org/realityforge/gwt-appcache.png?branch=master)](http://travis-ci.org/realityforge/gwt-appcache)\r\n\r\nThe HTML5 Appcache specification is one mechanism for enabling offline\r\nHTML5 applications. This library provides a simple way to generate the\r\nrequired cache manifests and serve for each separate permutation. The\r\nlibrary also supports the browser side aspect of appcache\r\nspecification. The appendix section includes further references for\r\nthe appcache spec.\r\n\r\nQuick Start\r\n===========\r\n\r\nThe simplest way to appcache enable a GWT application is to;\r\n\r\n* add the following dependencies into the build system. i.e.\r\n\r\n```xml\r\n<dependency>\r\n   <groupId>org.realityforge.gwt.appcache</groupId>\r\n   <artifactId>gwt-appcache-client</artifactId>\r\n   <version>0.9</version>\r\n   <scope>provided</scope>\r\n</dependency>\r\n<dependency>\r\n   <groupId>org.realityforge.gwt.appcache</groupId>\r\n   <artifactId>gwt-appcache-linker</artifactId>\r\n   <version>0.9</version>\r\n   <scope>provided</scope>\r\n</dependency>\r\n<dependency>\r\n   <groupId>org.realityforge.gwt.appcache</groupId>\r\n   <artifactId>gwt-appcache-server</artifactId>\r\n   <version>0.9</version>\r\n</dependency>\r\n```\r\n\r\n* add the following snippet into the .gwt.xml file.\r\n\r\n```xml\r\n<module rename-to='myapp'>\r\n  ...\r\n\r\n  <!-- Enable the client-side library -->\r\n  <inherits name=\"org.realityforge.gwt.appcache.Appcache\"/>\r\n\r\n  <!-- Enable the linker -->\r\n  <inherits name=\"org.realityforge.gwt.appcache.linker.Linker\"/>\r\n\r\n  <!-- enable the linker that generates the manifest -->\r\n  <add-linker name=\"appcache\"/>\r\n\r\n  <!-- configure all the static files not managed by the GWT compiler -->\r\n  <extend-configuration-property name=\"appcache_static_files\" value=\"./\"/>\r\n  <extend-configuration-property name=\"appcache_static_files\" value=\"index.html\"/>\r\n</module>\r\n```\r\n\r\n* configure html that launches the application to look for the manifest.\r\n\r\n```xml\r\n<!doctype html>\r\n<html manifest=\"myapp.appcache\">\r\n   ...\r\n</html>\r\n```\r\n\r\n* declare the servlet that serves the manifest.\r\n\r\n```java\r\n@WebServlet( urlPatterns = { \"/myapp.manifest\" } )\r\npublic class ManifestServlet\r\n  extends AbstractManifestServlet\r\n{\r\n  public ManifestServlet()\r\n  {\r\n    addPropertyProvider( new UserAgentPropertyProvider() );\r\n  }\r\n}\r\n```\r\n\r\n* interact with the application from within the browser.\r\n\r\n```java\r\nfinal ApplicationCache cache = ApplicationCache.getApplicationCacheIfSupported();\r\nif ( null != cache )\r\n{\r\n  cache.addUpdateReadyHandler( new UpdateReadyEvent.Handler()\r\n  {\r\n    @Override\r\n    public void onUpdateReadyEvent( @Nonnull final UpdateReadyEvent event )\r\n    {\r\n      //Force a cache update if new version is available\r\n      cache.swapCache();\r\n    }\r\n  } );\r\n\r\n  // Ask the browser to recheck the cache\r\n  cache.requestUpdate();\r\n\r\n  ...\r\n```\r\n\r\n\r\nThis should be sufficient to get your application using the appcache. If you\r\nload the application in a modern browser you should see it making use of the\r\ncache in the console.\r\n\r\nA very simple example of this code is available in the\r\n[gwt-appcache-example](https://github.com/realityforge/gwt-appcache-example)\r\nproject.\r\n\r\nHow does it work?\r\n=================\r\n\r\nFor every permutation generated by the GWT compiler, a separate manifest file\r\nis generated. The manifest includes almost all public resources generated by\r\nGWT with the exception of some used during debugging and development (i.e.\r\nmyapp.devmode.js and compilation-mappings.txt). The manifest also includes\r\nany additional files declared using the \"appcache_static_files\" configuration\r\nsetting.\r\n\r\nAfter the GWT compiler has generated all the different permutations, a single\r\nxml descriptor permutations.xml is generated that lists all the permutations\r\nand the  deferred-binding properties that were used to uniquely identify the\r\npermutations. Typically these include values of properties such as \"user.agent\".\r\n\r\nIf the compiler is using soft permutations then it is possible that multiple\r\ndeferred-binding properties will be served using a single permutation, in which\r\ncase the descriptor will have comma separate values in the permutations.xml for\r\nthat permutation.\r\n\r\nThe manifest servlet is then responsible for reading the permutations.xml and\r\ninspecting the incoming request and generating properties that enable it to select\r\nthe correct permutation and thus the correct manifest file. The selected manifest\r\nfile is returned to the requester.\r\n\r\nAppendix\r\n--------\r\n\r\n* [A Beginner's Guide to Using the Application Cache](http://www.html5rocks.com/en/tutorials/appcache/beginner/)\r\n* [Appcache Facts](http://appcachefacts.info/)\r\n* [Offline Web Application Standard](http://www.whatwg.org/specs/web-apps/current-work/multipage/offline.html)\r\n\r\nCredit\r\n------\r\n\r\nThis library began as a enhancement of similar functionality in the\r\n[MGWT](https://github.com/dankurka/mgwt) project by Daniel Kurka. All\r\ncredit goes to Daniel for the initial code and idea.\r\n","google":"UA-41755265-2","note":"Don't delete this file! It's used internally to help with page regeneration."}